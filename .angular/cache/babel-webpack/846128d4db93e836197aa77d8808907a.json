{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./company.service\";\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(http, companyService) {\n      this.http = http;\n      this.companyService = companyService;\n      this.path = 'http://localhost:56183/api/auth/';\n      this.httpOptions = {};\n    }\n\n    login(user) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.post(this.path + 'signin', user, this.httpOptions).toPromise().then(data => __awaiter(this, void 0, void 0, function* () {\n          sessionStorage.setItem('loggedUser', user.email);\n          sessionStorage.setItem('token', data.token);\n          this.setHttpOptions();\n          const userId = (yield this.getActiveUser()).id.toString();\n          sessionStorage.setItem('userId', userId);\n        })).then(() => __awaiter(this, void 0, void 0, function* () {\n          const ifUserHaveCompany = yield this.companyService.ifUserHaveCompany();\n\n          if (ifUserHaveCompany) {\n            sessionStorage.setItem('hasCompany', 'true');\n          }\n        }));\n      });\n    }\n\n    register(user) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.http.post(this.path + 'signup', user, this.httpOptions).toPromise();\n      });\n    }\n\n    getActiveUser() {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield this.http.get(this.path + 'getactiveuser', this.httpOptions).toPromise();\n      });\n    }\n\n    isLoggedIn() {\n      return sessionStorage.getItem('token') != null;\n    }\n\n    logout() {\n      sessionStorage.removeItem('loggedUser');\n      sessionStorage.removeItem('token');\n      sessionStorage.removeItem('userId');\n      sessionStorage.removeItem('hasCompany');\n    }\n\n    setHttpOptions() {\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + sessionStorage.getItem('token')\n        })\n      };\n    }\n\n  }\n\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CompanyService));\n  };\n\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module"}